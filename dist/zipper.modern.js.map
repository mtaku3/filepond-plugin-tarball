{"version":3,"file":"zipper.modern.js","sources":["../src/types.ts","../src/utils.ts","../src/zipper.ts"],"sourcesContent":["interface TargetFilter {\n  ADD_ITEMS: string;\n}\n\nexport type FilterKey = keyof TargetFilter;\n\nexport interface ItemType extends File {\n  _relativePath?: string;\n}\n\ntype FilterCallback = (items: ItemType[]) => Promise<ItemType[]>;\ntype AddFilterCallback = (key: FilterKey, callback: FilterCallback) => void;\n\nexport interface PluginOptions {\n  addFilter: AddFilterCallback;\n}\n\nexport interface Filter {\n  options: unknown;\n}\n\nexport type ZipperCallback = (items: Promise<ItemType>[]) => ItemType[];\n\nexport class Item extends File implements ItemType {\n  _relativePath?: string;\n}\n","import JSZip from 'jszip';\nimport {Item, ItemType} from './types';\n\nconst directories = {};\n\nexport const getDirectoryGroups = (items: ItemType[]): Record<string, ItemType[]> => {\n  items\n    .filter((item) => item._relativePath)\n    .forEach((item) => {\n      const [, group] = item._relativePath.split('/');\n\n      if (!directories[group]) {\n        directories[group] = [];\n      }\n\n      directories[group].push(item);\n    });\n\n  return directories;\n};\n\nexport const generateZip = (items: ItemType[]): Promise<ItemType>[] => {\n  getDirectoryGroups(items);\n\n  return Object.keys(directories).map(async (name) => {\n    const zip = new JSZip();\n\n    directories[name].forEach((file) => {\n      zip.file(file._relativePath, file);\n    });\n\n    delete directories[name];\n\n    const file = await zip.generateAsync({type: 'blob'});\n\n    return new Item([file], `${name}.zip`);\n  });\n};\n","import {Filter, PluginOptions, ZipperCallback} from './types';\nimport {generateZip} from './utils';\n\nconst Zipper = (callback?: ZipperCallback) => ({addFilter}: PluginOptions): Filter => {\n  addFilter('ADD_ITEMS', async (items) => {\n    const zips = generateZip(items);\n\n    const zipFiles = callback ? callback(zips) : await Promise.all(zips);\n\n    return items.filter((item) => !item._relativePath).concat(zipFiles || []);\n  });\n\n  return {options: {}};\n};\n\nexport default Zipper;\n"],"names":["Item","File","directories","callback","addFilter","async","zips","items","filter","item","_relativePath","forEach","group","split","push","getDirectoryGroups","Object","keys","map","zip","JSZip","name","file","generateAsync","type","generateZip","zipFiles","Promise","all","concat","options"],"mappings":"2BAuBaA,UAAaC,MCpB1B,MAAMC,EAAc,kBCAJC,GAA8B,EAAEC,UAAAA,MAC9CA,EAAU,YAAaC,MAAAA,IACrB,MAAMC,EDgBkBC,CAAAA,IAhBOA,CAAAA,IACjCA,EACGC,OAAQC,GAASA,EAAKC,eACtBC,QAASF,IACR,OAASG,GAASH,EAAKC,cAAcG,MAAM,KAEtCX,EAAYU,KACfV,EAAYU,GAAS,IAGvBV,EAAYU,GAAOE,KAAKL,MAO5BM,CAAmBR,GAEZS,OAAOC,KAAKf,GAAagB,IAAIb,MAAAA,IAClC,MAAMc,EAAM,IAAIC,EAEhBlB,EAAYmB,GAAMV,QAASW,IACzBH,EAAIG,KAAKA,EAAKZ,cAAeY,YAGxBpB,EAAYmB,GAEnB,MAAMC,QAAaH,EAAII,cAAc,CAACC,KAAM,SAE5C,WAAWxB,EAAK,CAACsB,GAAUD,aC9BdI,CAAYlB,GAEnBmB,EAAWvB,EAAWA,EAASG,SAAcqB,QAAQC,IAAItB,GAE/D,OAAOC,EAAMC,OAAQC,IAAUA,EAAKC,eAAemB,OAAOH,GAAY,MAGjE,CAACI,QAAS"}