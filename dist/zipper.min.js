!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t(require("jszip")):"function"==typeof define&&define.amd?define(["jszip"],t):(e=e||self).FilepondZipper=t(e.JSZip)}(this,function(e){e=e&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e;class t extends File{}return r=>({addFilter:n})=>(n("ADD_ITEMS",function(n){try{function o(e){return n.filter(e=>!e._relativePath).concat(e||[])}const i=(r=>{const n=(e=>{const t={};return e.filter(e=>e._relativePath).forEach(e=>{const[,r]=e._relativePath.split("/");t[r]||(t[r]=[]),t[r].push(e)}),t})(r);return Object.keys(n).map(function(r){try{const o=new e;return n[r].forEach(e=>{o.file(e._relativePath,e)}),delete n[r],Promise.resolve(o.generateAsync({type:"blob"})).then(function(e){return new t([e],r+".zip")})}catch(e){return Promise.reject(e)}})})(n);return Promise.resolve(r?o(r(i)):Promise.resolve(Promise.all(i)).then(o))}catch(e){return Promise.reject(e)}}),{options:{}})});
//# sourceMappingURL=zipper.min.js.map
