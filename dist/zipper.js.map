{"version":3,"file":"zipper.js","sources":["../src/types.ts","../src/utils.ts","../src/zipper.ts"],"sourcesContent":["import JSZip from \"jszip\";\n\ndeclare global {\n  interface Window { JSZip: JSZip }\n}\n\ninterface TargetFilter {\n  FILTER_ADDED_ITEMS: string;\n}\n\nexport type FilterKey = keyof TargetFilter;\n\nexport interface ItemType extends File {\n  _relativePath?: string;\n}\n\ntype FilterCallback = (items: ItemType[]) => Promise<ItemType[]>;\ntype AddFilterCallback = (key: FilterKey, callback: FilterCallback) => void;\n\nexport interface PluginOptions {\n  addFilter: AddFilterCallback;\n}\n\nexport interface Filter {\n  options: unknown;\n}\n\nexport type ZipperCallback = (items: Promise<ItemType[]>) => ItemType[];\n\nexport class Item extends File implements ItemType {\n  _relativePath?: string;\n}\n","import JSZip from \"jszip\";\nimport { Item, ItemType } from \"./types\";\n\nconst Zip = window.JSZip || JSZip;\n\nexport const getDirectoryGroups = (items: ItemType[]): Record<string, ItemType[]> => {\n  const directories = {};\n\n  items\n    .filter((item) => item._relativePath)\n    .forEach((item) => {\n      const [, group] = item._relativePath.split(\"/\");\n      if (!directories[group]) {\n        directories[group] = [];\n      }\n\n      directories[group].push(item);\n    });\n\n  return directories;\n};\n\nexport const generateZip = (items: ItemType[]): Promise<ItemType[]> => {\n  const directories = getDirectoryGroups(items);\n  const generators = Object.keys(directories).map(async (name) => {\n    const zip = new Zip();\n    directories[name].forEach((file) => {\n      zip.file(file._relativePath, file);\n    });\n\n    delete directories[name];\n\n    const file = await zip.generateAsync({ type: \"blob\" });\n\n    return new Item([file], `${name}.zip`);\n  });\n\n  return Promise.all(generators);\n};\n","import { Filter, PluginOptions, ZipperCallback } from \"./types\";\nimport {generateZip} from \"./utils\";\n\nconst Zipper = (callback?: ZipperCallback) => ({\n  addFilter,\n}: PluginOptions): Filter => {\n  addFilter(\"FILTER_ADDED_ITEMS\", async (items) => {\n    const make = () => generateZip(items);\n\n    const zipFiles = callback\n      ? callback(make())\n      : await make();\n\n    return items.filter((item) => !item._relativePath).concat(zipFiles || []);\n  });\n\n  return { options: {} };\n};\n\nexport default Zipper;\n"],"names":["Item","File","Zip","window","JSZip","callback","addFilter","items","zipFiles","filter","item","_relativePath","concat","make","directories","forEach","group","split","push","getDirectoryGroups","generators","Object","keys","map","name","zip","file","generateAsync","type","Promise","all","generateZip","options"],"mappings":"kFA6BaA,UAAaC,MC1B1B,MAAMC,EAAMC,OAAOC,OAASA,iBCAZC,GAA8B,EAC5CC,UAAAA,MAEAA,EAAU,8BAA6BC,kBAG/BC,GAIN,OAAOD,EAAME,OAAQC,IAAUA,EAAKC,eAAeC,OAAOJ,GAAY,IANtE,MAAMK,EAAO,IDeWN,CAAAA,IAC1B,MAAMO,EAlB2BP,CAAAA,IACjC,MAAMO,EAAc,GAapB,OAXAP,EACGE,OAAQC,GAASA,EAAKC,eACtBI,QAASL,IACR,OAASM,GAASN,EAAKC,cAAcM,MAAM,KACtCH,EAAYE,KACfF,EAAYE,GAAS,IAGvBF,EAAYE,GAAOE,KAAKR,KAGrBI,GAIaK,CAAmBZ,GACjCa,EAAaC,OAAOC,KAAKR,GAAaS,aAAWC,OACrD,MAAMC,EAAM,IAAIvB,SAChBY,EAAYU,GAAMT,QAASW,IACzBD,EAAIC,KAAKA,EAAKf,cAAee,YAGxBZ,EAAYU,mBAEAC,EAAIE,cAAc,CAAEC,KAAM,wBAAvCF,GAEN,WAAW1B,EAAK,CAAC0B,GAAUF,YAVV,qCAanB,OAAOK,QAAQC,IAAIV,IC9BEW,CAAYxB,0BAEdF,IACbA,EAASQ,sBACHA,cALH,qCAUF,CAAEmB,QAAS"}