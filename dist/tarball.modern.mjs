const e={name:100,mode:8,uid:8,gid:8,size:12,mtime:12,chksum:8,typeflag:1,linkname:100,magic:5,version:2,uname:32,gname:32,devmajor:8,devminor:8,prefix:155,padding:12},t={};Object.keys(e).reduce((n,a)=>(t[a]=n,n+e[a]),0);const n=e=>({name:e.name,mode:"777",uid:0,gid:0,size:e.content.byteLength,mtime:Math.floor(Number(new Date)/1e3),chksum:"        ",typeflag:"0",magic:"ustar",version:"  ",uname:"",gname:""}),a=["name","linkname","magic","chksum","typeflag","version","uname","gname"];function r(e,t){return("000000000000"+(e=e.toString(8))).slice(e.length+12-t)}function i(e){const t=new Uint8Array(e.length);for(let n=0;n<e.length;n++)t[n]=e.charCodeAt(n);return t}const s={},o=e=>e.substring(0,e.lastIndexOf("."))||e,c=(c=!1,l=!1,m)=>({addFilter:u})=>(u("ADD_ITEMS",async u=>{const f=((c,l,m)=>{if(l){if((e=>{e.filter(e=>e._relativePath).forEach(e=>{const[,t]=e._relativePath.split("/");s[t]||(s[t]=[]),s[t].push(e)})})(c),m){const e=c.filter(e=>!e._relativePath);if(0<e.length){const t=o(e[0].name);s[t]=e}}}else{const e=c.filter(e=>e._relativePath),t=c.filter(e=>!e._relativePath);if(0<e.length){const t=e[0],[,n]=t._relativePath.split("/");s[n]=c}else{const e=o(t[0].name);s[e]=c}}return Object.keys(s).map(o=>{const c=[];return s[o].forEach(e=>{c.push(new Promise(t=>{const n=new FileReader;n.addEventListener("load",n=>{t({name:e._relativePath?e._relativePath.slice(1):e.name,content:new Uint8Array(n.target.result)})}),n.readAsArrayBuffer(e)}))}),delete s[o],async()=>{const s=function(s){let o=new Uint8Array(0);for(let c of s){"string"==typeof c.content&&(c.content=i(c.content)),c=Object.assign(n(c),c);const s=new Uint8Array(512*Math.ceil((512+c.size)/512)),l=Object.keys(e).reduce((n,o)=>{if(!(o in c))return n;const l=i(a.indexOf(o)>-1?c[o]:r(c[o],e[o]-1));return s.set(l,t[o]),n+l.reduce((e,t)=>e+t,0)},0);s.set(i(r(l,7)),t.chksum),s.set(c.content,512);const m=new Uint8Array(o.byteLength+s.byteLength);m.set(o,0),m.set(s,o.byteLength),o=m}const c=new Uint8Array(o.byteLength+1024);return c.set(o,0),c}(await Promise.all(c)),l=new Blob([s],{type:"application/x-tar"});return new File([l],`${o}.tar`)}})})(u,!c,l);let h=[];if(l||(h=u.filter(e=>!e._relativePath)),m)return m(f),h;const g=await Promise.all(f.map(e=>e()));return h.concat(g)}),{options:{}});export{c as default};
//# sourceMappingURL=tarball.modern.mjs.map
