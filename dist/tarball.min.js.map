{"version":3,"file":"tarball.min.js","sources":["../src/tarts.js","../src/utils.js","../src/tarball.js"],"sourcesContent":["export default tarts\n\nconst headers = {\n  name: 100,\n  mode: 8,\n  uid: 8,\n  gid: 8,\n  size: 12,\n  mtime: 12,\n  chksum: 8,\n  typeflag: 1,\n  linkname: 100,\n  magic: 5,\n  version: 2,\n  uname: 32,\n  gname: 32,\n  devmajor: 8,\n  devminor: 8,\n  prefix: 155,\n  padding: 12\n}\n\nconst offsets = {}\nObject.keys(headers).reduce((acc, k) => {\n  offsets[k] = acc\n  return acc + headers[k]\n}, 0)\n\nconst defaults = f => ({\n  name: f.name,\n  mode: '777',\n  uid: 0,\n  gid: 0,\n  size: f.content.byteLength,\n  mtime: Math.floor(Number(new Date()) / 1000),\n  chksum: '        ',\n  typeflag: '0',\n  magic: 'ustar',\n  version: '  ',\n  uname: '',\n  gname: ''\n})\n\nconst nopad = ['name', 'linkname', 'magic', 'chksum', 'typeflag', 'version', 'uname', 'gname']\n    , bsize = 512\n\nfunction tarts(files) {\n  let buffer = new Uint8Array(0)\n\n  for (let f of files) {\n    if (typeof f.content === 'string')\n      f.content = stringToUint8(f.content)\n\n    f = Object.assign(defaults(f), f)\n\n    const b = new Uint8Array(Math.ceil((bsize + f.size) / bsize) * bsize)\n\n    const checksum = Object.keys(headers).reduce((acc, k) => {\n      if (!(k in f))\n        return acc\n\n      const value = stringToUint8(nopad.indexOf(k) > -1\n        ? f[k]\n        : pad(f[k], headers[k] - 1))\n\n      b.set(value, offsets[k])\n      return acc + value.reduce((a, b) => a + b, 0)\n    }, 0)\n\n    b.set(stringToUint8(pad(checksum, 7)), offsets.chksum)\n    b.set(f.content, bsize)\n\n    const sum = new Uint8Array(buffer.byteLength + b.byteLength)\n    sum.set(buffer, 0)\n    sum.set(b, buffer.byteLength)\n\n    buffer = sum;\n  }\n\n  const sum = new Uint8Array(buffer.byteLength + bsize * 2);\n  sum.set(buffer, 0);\n\n  return sum;\n}\n\nfunction pad(s, n) {\n  s = s.toString(8)\n  return ('000000000000' + s).slice(s.length + 12 - n)\n}\n\nfunction stringToUint8(s) {\n  const a = new Uint8Array(s.length)\n  for (let i = 0; i < s.length; i++)\n    a[i] = s.charCodeAt(i)\n  return a\n}","import Tar from './tarts';\n\nconst directories = {};\n\nexport const getDirectoryGroups = (items) => {\n  items\n    .filter((item) => item._relativePath)\n    .forEach((item) => {\n      const [, group] = item._relativePath.split('/');\n\n      if (!directories[group]) {\n        directories[group] = [];\n      }\n\n      directories[group].push(item);\n    });\n\n  return directories;\n};\n\nconst getFilenameWithoutExtension = name => name.substring(0, name.lastIndexOf('.')) || name;\n\nexport const generateTar = (items, splitInDirectoryGroups, archivePlainFiles) => {\n  if (splitInDirectoryGroups) {\n    getDirectoryGroups(items);\n\n    if (archivePlainFiles) {\n      const plainFiles = items.filter((item) => !item._relativePath);\n      if (0 < plainFiles.length) {\n        const first = plainFiles[0];\n        const fileNameWithoutExtension = getFilenameWithoutExtension(first.name);\n        directories[fileNameWithoutExtension] = plainFiles;\n      }\n    }\n  } else {\n    const notPlainFiles = items.filter((item) => item._relativePath);\n    const plainFiles = items.filter((item) => !item._relativePath);\n  \n    if (0 < notPlainFiles.length) {\n      const first = notPlainFiles[0];\n      const [, rootDirectoryName] = first._relativePath.split('/');\n      directories[rootDirectoryName] = items;\n    } else {\n      const first = plainFiles[0];\n      const fileNameWithoutExtension = getFilenameWithoutExtension(first.name);\n      directories[fileNameWithoutExtension] = items;\n    }\n  }\n\n  return Object.keys(directories).map((name) => {\n    const entries = [];\n\n    directories[name].forEach((file) => {\n      entries.push(\n        new Promise((resolve) => {\n          const reader = new FileReader();\n\n          reader.addEventListener('load', (event) => {\n            resolve({\n              // Delete first character of string because it starts with '/'\n              name: file._relativePath ? file._relativePath.slice(1) : file.name,\n              content: new Uint8Array(event.target.result),\n            });\n          });\n          reader.readAsArrayBuffer(file);\n        })\n      );\n    });\n\n    delete directories[name];\n\n    return async () => {\n      const tar = Tar(await Promise.all(entries));\n      const file = new Blob([tar], {type: 'application/x-tar'});\n\n      return new File([file], `${name}.tar`);\n    };\n  });\n};\n","import {generateTar} from './utils';\n\nconst FilePondPluginTarball =\n  (archiveMultipleDirectoriesIntoOne = false, archivePlainFiles = false, callback) =>\n  ({ addFilter }) => {\n    addFilter('ADD_ITEMS', async (items) => {\n      const generators = generateTar(items, !archiveMultipleDirectoriesIntoOne, archivePlainFiles);\n\n      let plainFiles = [];\n      if (!archivePlainFiles) {\n        plainFiles = items.filter((item) => !item._relativePath);\n      }\n\n      if (callback) {\n        callback(generators);\n\n        return plainFiles;\n      }\n\n      const tarFiles = await Promise.all(generators.map((generate) => generate()));\n\n      return plainFiles.concat(tarFiles);\n    });\n\n    return {\n      options: {\n      },\n    };\n  };\n\nexport default FilePondPluginTarball;\n"],"names":["headers","name","mode","uid","gid","size","mtime","chksum","typeflag","linkname","magic","version","uname","gname","devmajor","devminor","prefix","padding","offsets","Object","keys","reduce","acc","k","defaults","f","content","byteLength","Math","floor","Number","Date","nopad","bsize","pad","s","n","toString","slice","length","stringToUint8","a","Uint8Array","i","charCodeAt","directories","getFilenameWithoutExtension","substring","lastIndexOf","FilePondPluginTarball","archiveMultipleDirectoriesIntoOne","archivePlainFiles","callback","addFilter","items","generators","generateTar","splitInDirectoryGroups","filter","item","_relativePath","forEach","group","split","push","getDirectoryGroups","plainFiles","fileNameWithoutExtension","notPlainFiles","first","rootDirectoryName","map","entries","file","Promise","resolve","reader","FileReader","addEventListener","event","target","result","readAsArrayBuffer","all","then","_Promise$all","tar","files","buffer","assign","b","ceil","checksum","value","indexOf","set","sum","Tar","Blob","type","File","e","reject","generate","tarFiles","concat","options"],"mappings":"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"}